<?php

namespace JFramework\Facades;

use Illuminate\Support\Facades\Facade;

/**
 * @method static bool exists($key)
 * @method static int del($key1, ...$otherKeys)
 * @method static int type($key)
 * @method static array keys($pattern)
 * @method static string randomKey()
 * @method static bool rename($srcKey, $dstKey)
 * @method static bool renameNx($srcKey, $dstKey)
 * @method static bool expire($key, $ttl)
 * @method static bool expireAt($key, $timestamp)
 * @method static int ttl($key)
 * @method static bool move($key, $dbIndex)
 * @method static mixed sort($key, $option = null)
 * @method static string dump($key)
 * @method static bool restore($key, $ttl, $value)
 * @method static bool set($key, $value, $timeout = null)
 * @method static bool|array setnx($key, $value)
 * @method static bool mset(array $array)
 * @method static int msetnx(array $array)
 * @method static string get($key)
 * @method static array mget(array $array)
 * @method static string getSet($key, $value)
 * @method static int incr($key)
 * @method static int incrBy($key, $value)
 * @method static int decr($key)
 * @method static int decrBy($key, $value)
 * @method static int rPush($key, ...$value1)
 * @method static int lPush($key, ...$value1)
 * @method static int lLen($key)
 * @method static array lRange($key, $start, $end)
 * @method static bool lTrim($key, $start, $stop)
 * @method static string lIndex($key, $index)
 * @method static bool lSet($key, $index, $value)
 * @method static bool lRem($key, $value, $count)
 * @method static string lPop($key)
 * @method static string rPop($key)
 * @method static string rpoplpush($srcKey, $dstKey)
 * @method static int sAdd($key, ...$value1)
 * @method static int sRem($key, ...$member1)
 * @method static string|array sPop($key, $count = 1)
 * @method static bool sMove($srcKey, $dstKey, $member)
 * @method static int sCard($key)
 * @method static bool sIsMember($key, $value)
 * @method static array sInter($key1, ...$otherKeys)
 * @method static int sInterStore($dstKey, $key1, ...$otherKeys)
 * @method static array sUnion($key1, ...$otherKeys)
 * @method static int sUnionStore($dstKey, $key1, ...$otherKeys)
 * @method static array sDiff($key1, ...$otherKeys)
 * @method static int sDiffStore($dstKey, $key1, ...$otherKeys)
 * @method static array sMembers($key)
 * @method static string|array sRandMember($key, $count = 1)
 * @method static int zAdd($key, $options, $score1, $value1, $score2 = null, $value2 = null, $scoreN = null, $valueN = null)
 * @method static float zIncrBy($key, $value, $member)
 * @method static int zRem($key, $member1, ...$otherMembers)
 * @method static zRange($key, $start, $end, $withscores = null)
 * @method static zRevRange($key, $start, $end, $withscore = null)
 * @method static zRangeByScore($key, $start, $end, array $options = array())
 * @method static zCard($key)
 * @method static zScore($key, $member)
 * @method static zRemRangeByScore($key, $start, $end)
 * @method static ping()
 * @method static auth($password)
 * @method static select($dbIndex)
 * @method static echo($message)
 * @method static info($option = null)
 * @method static slaveof($host = '127.0.0.1', $port = 6379)
 * @method static dbSize()
 * @method static flushDB()
 * @method static flushAll()
 * @method static save()
 * @method static bgsave()
 * @method static lastSave()
 * @method static bgrewriteaof()
 * @method static setex($key, $ttl, $value)
 * @method static append($key, $value)
 * @method static substr($key, $start, $end)
 * @method static blPop($keys, $timeout)
 * @method static brPop(array $keys, $timeout)
 * @method static zUnionStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
 * @method static zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
 * @method static zCount($key, $start, $end)
 * @method static zRank($key, $member)
 * @method static zRevRank($key, $member)
 * @method static zRemRangeByRank($key, $start, $end)
 * @method static hSet($key, $hashKey, $value)
 * @method static hSetNx($key, $hashKey, $value)
 * @method static hMSet($key, $hashKeys)
 * @method static hIncrBy($key, $hashKey, $value)
 * @method static hGet($key, $hashKey)
 * @method static hMGet($key, $hashKeys)
 * @method static hDel($key, $hashKey1, ...$otherHashKeys)
 * @method static hExists($key, $hashKey)
 * @method static hLen($key)
 * @method static hKeys($key)
 * @method static hVals($key)
 * @method static hGetAll($key)
 * @method static multi($mode = Redis::MULTI)
 * @method static exec()
 * @method static discard()
 * @method static subscribe($channels, $callback)
 * @method static unsubscribe($channels = null)
 * @method static psubscribe($patterns, $callback)
 * @method static punsubscribe($patterns = null)
 * @method static publish($channel, $message)
 * @method static config($operation, $key, $value)
 * @method static persist($key)
 * @method static strlen($key)
 * @method static setRange($key, $offset, $value)
 * @method static getRange($key, $start, $end)
 * @method static setBit($key, $offset, $value)
 * @method static getBit($key, $offset)
 * @method static rPushx($key, $value)
 * @method static lPushx($key, $value)
 * @method static lInsert($key, $position, $pivot, $value)
 * @method static brpoplpush($srcKey, $dstKey, $timeout)
 * @method static zRevRangeByScore($key, $start, $end, array $options = array())
 * @method static watch($key)
 * @method static unwatch()
 * @method static object($string = '', $key = '')
 * @method static slowLog(string $operation, int $length = null)
 * @method static client($command, $value = '')
 * @method static pttl($key)
 * @method static pExpire($key, $ttl)
 * @method static pExpireAt($key, $timestamp)
 * @method static migrate($host, $port, $key, $db, $timeout, $copy = false, $replace = false)
 * @method static psetex($key, $ttl, $value)
 * @method static incrByFloat($key, $increment)
 * @method static bitOp($operation, $retKey, $key1, ...$otherKeys)
 * @method static bitCount($key)
 * @method static hIncrByFloat($key, $field, $increment)
 * @method static eval($script, $args = array(), $numKeys = 0)
 * @method static evalSha($scriptSha, $args = array(), $numKeys = 0)
 * @method static script($command, $script)
 * @method static time()
 * @method static scan(&$iterator, $pattern = null, $count = 0)
 * @method static bitpos($key, $bit, $start = 0, $end = null)
 * @method static sScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static zScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static zRangeByLex($key, $min, $max, $offset = null, $limit = null)
 * @method static zRevRangeByLex($key, $min, $max, $offset = null, $limit = null)
 * @method static hScan($key, &$iterator, $pattern = null, $count = 0)
 * @method static pubsub($keyword, $argument)
 * @method static pfAdd($key, array $elements)
 * @method static pfCount($key)
 * @method static pfMerge($destKey, array $sourceKeys)
 * @method static hStrLen(string $key, string $field)
 * @method static geoadd($key, $longitude, $latitude, $member)
 * @method static geohash($key, ...$member)
 * @method static geopos(string $key, string $member)
 * @method static geodist($key, $member1, $member2, $unit = null)
 * @method static georadius($key, $longitude, $latitude, $radius, $unit, array $options = null)
 * @method static georadiusbymember($key, $member, $radius, $units, array $options = null)
 */
class Redis extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return 'redis';
    }
}
